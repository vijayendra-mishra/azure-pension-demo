name: Create Release Branch

on:
  push:
    branches: [ main ]

jobs:
  create-release-branch:
    if: github.event_name == 'push' && !contains(github.event.head_commit.message, 'Merge pull request') 
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Get latest tag
      id: get-latest-tag
      run: |
        # Get the latest tag, or default to v0.0.0 if no tags exist
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "latest-tag=$LATEST_TAG" >> $GITHUB_OUTPUT
    
    - name: Generate new version
      id: generate-version
      run: |
        # Extract version number from latest tag (remove 'v' prefix)
        LATEST_VERSION="${{ steps.get-latest-tag.outputs.latest-tag }}"
        LATEST_VERSION=${LATEST_VERSION#v}
        
        # Split version into parts
        IFS='.' read -ra VERSION_PARTS <<< "$LATEST_VERSION"
        MAJOR=${VERSION_PARTS[0]:-0}
        MINOR=${VERSION_PARTS[1]:-0}
        PATCH=${VERSION_PARTS[2]:-0}
        
        # Increment patch version
        PATCH=$((PATCH + 1))
        
        NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
        echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "branch-name=release/$NEW_VERSION" >> $GITHUB_OUTPUT
    
    - name: Create release branch
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Create and push release branch
        git checkout -b ${{ steps.generate-version.outputs.branch-name }}
        git push origin ${{ steps.generate-version.outputs.branch-name }}
    
    - name: Create Pull Request
      uses: actions/github-script@v6
      with:
        script: |
          const { data: pullRequest } = await github.rest.pulls.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Release ${{ steps.generate-version.outputs.new-version }}`,
            head: '${{ steps.generate-version.outputs.branch-name }}',
            base: 'main',
            body: `## Release ${{ steps.generate-version.outputs.new-version }}
            
            This PR will deploy to production when merged.
            
            ### Changes:
            - Auto-generated release branch
            - Ready for production deployment
            
            **Note:** This branch has been automatically deployed to the development environment.`
          });
          
          console.log(`Created PR #${pullRequest.number}`);

  create-release-tag:
    if: github.event_name == 'push' && contains(github.event.head_commit.message, 'Merge pull request') && contains(github.event.head_commit.message, 'release/')
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Extract version from commit message
      id: extract-version
      run: |
        # Extract version from merge commit message
        COMMIT_MSG="${{ github.event.head_commit.message }}"
        VERSION=$(echo "$COMMIT_MSG" | grep -oP 'release/\K[^"]*' | head -1)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Generate changelog
      id: changelog
      run: |
        # Get the release branch that was just merged
        RELEASE_BRANCH="release/${{ steps.extract-version.outputs.version }}"
        
        # Get commits from the release branch
        COMMITS=$(git log --pretty=format:"- %s (%h)" origin/$RELEASE_BRANCH --not origin/main~1)
        
        # Create changelog
        CHANGELOG="## Changes in ${{ steps.extract-version.outputs.version }}
        
$COMMITS"
        
        # Save changelog to output (escape newlines)
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.extract-version.outputs.version }}
        release_name: Release ${{ steps.extract-version.outputs.version }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: false
