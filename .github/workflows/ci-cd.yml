name: CI/CD Pipeline

# Simplified pipeline: test on PR, deploy to dev on main merge, deploy to prod on release
on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

permissions:
  contents: write
  pull-requests: write
  id-token: write
  actions: write
  security-events: write
  deployments: write
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Restore dependencies
      run: dotnet restore PensionDemo.sln
    
    - name: Build
      run: dotnet build PensionDemo.sln --no-restore
    
    - name: Test
      run: dotnet test PensionDemo.sln --no-build --verbosity normal --collect:"XPlat Code Coverage"

  deploy-dev:
    needs: test
    runs-on: ubuntu-latest
    if: "github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, 'chore(main): release')"
    environment: dev
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Restore dependencies
      run: dotnet restore src/Functions/Functions.csproj
    
    - name: Build Functions
      run: dotnet build src/Functions/Functions.csproj --configuration Release
    
    - name: Publish Functions
      run: dotnet publish src/Functions/Functions.csproj --configuration Release --output ./output
    
    - name: Deploy to Azure Functions Dev
      uses: Azure/functions-action@v1
      with:
        app-name: 'vjs-pension-dev-func'
        package: './output'
        publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE_DEV }}

  deploy-prod:
    needs: test
    runs-on: ubuntu-latest
    if: "github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, 'chore(main): release')"
    environment: prod
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Restore dependencies
      run: dotnet restore src/Functions/Functions.csproj
    
    - name: Build Functions
      run: dotnet build src/Functions/Functions.csproj --configuration Release
    
    - name: Publish Functions
      run: dotnet publish src/Functions/Functions.csproj --configuration Release --output ./output
    
    - name: Deploy to Azure Functions Prod
      uses: Azure/functions-action@v1
      with:
        app-name: 'vjs-pension-prod-func'
        package: './output'
        publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE_PROD }}

  release-please:
    # Runs after dev deployment completes successfully
    # Only creates release if there are conventional commits since last release
    needs: [test, deploy-dev]
    runs-on: ubuntu-latest
    if: "github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, 'chore(main): release') && needs.deploy-dev.result == 'success'"
    
    steps:
      - name: Run release-please
        id: release
        uses: googleapis/release-please-action@v4
        with:
          release-type: simple
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json
          token: ${{ secrets.RELEASE_PLEASE_TOKEN }}

  post-release:
    needs: [deploy-prod]
    runs-on: ubuntu-latest
    if: needs.deploy-prod.result == 'success'
    
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.RELEASE_PLEASE_TOKEN }}
          fetch-depth: 0
      
      - name: Clean up release-please branches
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # Delete ANY branch starting with "release-please"
          echo "üîç Looking for branches starting with 'release-please'..."
          git ls-remote --heads origin | awk '/release-please/ { print $2 }' | sed 's|refs/heads/||' | while read branch; do
            if [ ! -z "$branch" ]; then
              echo "üóëÔ∏è Deleting branch: $branch"
              git push origin --delete "$branch" || echo "‚ö†Ô∏è Could not delete $branch"
            fi
          done
          
          echo "‚úÖ All release-please branches cleaned up"
