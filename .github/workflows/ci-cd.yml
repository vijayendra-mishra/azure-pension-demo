name: CI/CD Pipeline

# Simplified pipeline: test on PR, deploy to dev on main merge, deploy to prod on release
on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

permissions:
  contents: write
  pull-requests: write
  id-token: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Restore dependencies
      run: dotnet restore PensionDemo.sln
    
    - name: Build
      run: dotnet build PensionDemo.sln --no-restore
    
    - name: Test
      run: dotnet test PensionDemo.sln --no-build --verbosity normal --collect:"XPlat Code Coverage"

  deploy-dev:
    needs: test
    runs-on: ubuntu-latest
    if: "github.ref == 'refs/heads/main' && github.event_name == 'push' && !contains(github.event.head_commit.message, 'chore(main): release')"
    environment: dev
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Restore dependencies
      run: dotnet restore src/Functions/Functions.csproj
    
    - name: Build Functions
      run: dotnet build src/Functions/Functions.csproj --configuration Release
    
    - name: Publish Functions
      run: dotnet publish src/Functions/Functions.csproj --configuration Release --output ./output
    
    - name: Deploy to Azure Functions Dev
      uses: Azure/functions-action@v1
      with:
        app-name: 'vjs-pension-dev-func'
        package: './output'
        publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE_DEV }}

  deploy-prod:
    needs: test
    runs-on: ubuntu-latest
    if: "github.ref == 'refs/heads/main' && github.event_name == 'push' && contains(github.event.head_commit.message, 'chore(main): release')"
    environment: prod
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Restore dependencies
      run: dotnet restore src/Functions/Functions.csproj
    
    - name: Build Functions
      run: dotnet build src/Functions/Functions.csproj --configuration Release
    
    - name: Publish Functions
      run: dotnet publish src/Functions/Functions.csproj --configuration Release --output ./output
    
    - name: Deploy to Azure Functions Prod
      uses: Azure/functions-action@v1
      with:
        app-name: 'vjs-pension-prod-func'
        package: './output'
        publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE_PROD }}

  release-please:
    needs: [test, deploy-dev]
    runs-on: ubuntu-latest
    if: "github.ref == 'refs/heads/main' && github.event_name == 'push' && !contains(github.event.head_commit.message, 'chore(main): release')"
    
    steps:
      - name: Run release-please
        uses: googleapis/release-please-action@v4
        with:
          release-type: simple
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json
          token: ${{ secrets.GITHUB_TOKEN }}

  post-release:
    needs: [deploy-prod]
    runs-on: ubuntu-latest
    if: always() && needs.deploy-prod.result == 'success'
    
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Clean up release-please branches
        run: |
          echo "üßπ Cleaning up release-please branches after successful prod deployment..."
          
          # Configure git
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # Find release-please branches with the specific pattern
          echo "üîç Looking for release-please branches..."
          git ls-remote --heads origin > remote_branches.txt
          
          # Check for the specific release-please branch pattern
          if grep -q "release-please--branches--main" remote_branches.txt; then
            echo "üìã Found release-please--branches--main branch to delete"
            git push origin --delete "release-please--branches--main" || echo "‚ö†Ô∏è Could not delete release-please--branches--main"
            echo "‚úÖ Deleted release-please--branches--main"
          else
            echo "‚ÑπÔ∏è No release-please--branches--main branch found"
          fi
          
          # Also check for any other release-please branches (fallback)
          RELEASE_BRANCHES=$(grep "release-please" remote_branches.txt | cut -d$'\t' -f2 | sed 's|refs/heads/||' || true)
          
          if [ ! -z "$RELEASE_BRANCHES" ]; then
            echo "üìã Found additional release-please branches:"
            echo "$RELEASE_BRANCHES"
            
            for branch in $RELEASE_BRANCHES; do
              echo "üóëÔ∏è Deleting branch: $branch"
              git push origin --delete "$branch" || echo "‚ö†Ô∏è Could not delete $branch (may already be deleted)"
            done
          fi
          
          rm -f remote_branches.txt
          echo "‚úÖ Branch cleanup completed"
